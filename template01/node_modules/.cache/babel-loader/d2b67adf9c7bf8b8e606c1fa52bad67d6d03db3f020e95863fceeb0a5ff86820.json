{"ast":null,"code":"/**\r\n * Retorna numero formateado como String\r\n * @param {Number} number\r\n * @returns String de numero con formato de dinero\r\n */\nconst moneyString = number => {\n  number = String(number);\n  const split = number.split('.');\n  const decimal = split[1];\n  number = split[0] ? split[0] : number;\n  console.log(number);\n  return '$' + String(number).replace(/(.)(?=(\\d{3})+$)/g, '$1.') + (decimal ? `,${decimal}` : '');\n};\nexport default moneyString;","map":{"version":3,"names":["moneyString","number","String","split","decimal","console","log","replace"],"sources":["D:/proyects/react/E-commerce_template01/template01/src/utils/Formats.js"],"sourcesContent":["\r\n/**\r\n * Retorna numero formateado como String\r\n * @param {Number} number\r\n * @returns String de numero con formato de dinero\r\n */\r\nconst moneyString = (number) => {\r\n    number = String(number)\r\n    const split = number.split('.');\r\n    const decimal = split[1];\r\n    number = split[0] ? split[0] : number;\r\n    console.log(number);\r\n    return ('$' + (String(number).replace(/(.)(?=(\\d{3})+$)/g, '$1.')) + (decimal ? `,${decimal}` : ''));\r\n};\r\n\r\n\r\nexport default moneyString;"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,WAAW,GAAIC,MAAM,IAAK;EAC5BA,MAAM,GAAGC,MAAM,CAACD,MAAM,CAAC;EACvB,MAAME,KAAK,GAAGF,MAAM,CAACE,KAAK,CAAC,GAAG,CAAC;EAC/B,MAAMC,OAAO,GAAGD,KAAK,CAAC,CAAC,CAAC;EACxBF,MAAM,GAAGE,KAAK,CAAC,CAAC,CAAC,GAAGA,KAAK,CAAC,CAAC,CAAC,GAAGF,MAAM;EACrCI,OAAO,CAACC,GAAG,CAACL,MAAM,CAAC;EACnB,OAAQ,GAAG,GAAIC,MAAM,CAACD,MAAM,CAAC,CAACM,OAAO,CAAC,mBAAmB,EAAE,KAAK,CAAE,IAAIH,OAAO,GAAI,IAAGA,OAAQ,EAAC,GAAG,EAAE,CAAC;AACvG,CAAC;AAGD,eAAeJ,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}